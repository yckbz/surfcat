"""
Trace plotting functions for time series data.

This module provides functions for plotting time traces such as
position vs time, species identity evolution, and other temporal data.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.axes import Axes
from matplotlib.ticker import MaxNLocator
from typing import Dict, Optional, Tuple, Union, List
import warnings


def plot_z_vs_time(data: Union[pd.DataFrame, Dict[str, np.ndarray]],
                   title: str = "Position vs Time",
                   xlabel: str = "Time (ps)",
                   ylabel: str = "Z Position (Å)",
                   figsize: Tuple[float, float] = (12, 7),
                   color_by: str = 'displacement',
                   scatter_size: float = 2,
                   alpha: float = 0.6,
                   cmap: str = 'plasma',
                   vmin: Optional[float] = None,
                   vmax: Optional[float] = None,
                   save_path: Optional[str] = None,
                   dpi: int = 300,
                   show: bool = True) -> Tuple[Figure, Axes]:
    """
    Plot Z position vs time with optional color coding.
    
    This function creates plots similar to those generated by
    OH_dist_t.py and oh_z_t.py scripts.
    
    Parameters
    ----------
    data : pandas.DataFrame or dict
        Time series data containing time, z, and optional color data
    title : str, default "Position vs Time"
        Plot title
    xlabel : str, default "Time (ps)"
        X-axis label
    ylabel : str, default "Z Position (Å)"
        Y-axis label
    figsize : tuple, default (12, 7)
        Figure size
    color_by : str, default 'displacement'
        Column name to use for coloring points
    scatter_size : float, default 2
        Size of scatter points
    alpha : float, default 0.6
        Transparency of points
    cmap : str, default 'plasma'
        Colormap name
    vmin : float, optional
        Minimum value for colormap
    vmax : float, optional
        Maximum value for colormap
    save_path : str, optional
        Path to save figure
    dpi : int, default 300
        Resolution for saved figure
    show : bool, default True
        Whether to display plot
        
    Returns
    -------
    tuple
        (Figure, Axes) objects
        
    Examples
    --------
    >>> fig, ax = plot_z_vs_time(trajectory_data, 
    ...                          color_by='displacement',
    ...                          title="OH⁻ Position Over Time")
    """
    fig, ax = plt.subplots(figsize=figsize)
    
    # Handle different input types
    if isinstance(data, pd.DataFrame):
        # Use DataFrame directly
        df = data
        required_cols = ['time', 'z']
        if color_by != 'none' and color_by in df.columns:
            required_cols.append(color_by)
        
        for col in required_cols[:2]:  # Check at least time and z
            if col not in df.columns:
                raise ValueError(f"DataFrame must contain '{col}' column")
        
        time_data = df['time'].values
        z_data = df['z'].values
        color_data = df[color_by].values if color_by in df.columns else None
        
    elif isinstance(data, dict):
        # Convert dict to arrays
        if 'time' not in data or 'z' not in data:
            raise ValueError("Data dict must contain 'time' and 'z' keys")
        
        time_data = data['time']
        z_data = data['z']
        color_data = data.get(color_by, None)
    
    else:
        raise ValueError("Data must be a pandas DataFrame or dictionary")
    
    # Create scatter plot
    if color_data is not None:
        # Colored scatter plot
        scatter = ax.scatter(time_data, z_data, 
                           c=color_data, s=scatter_size, alpha=alpha,
                           cmap=cmap, vmin=vmin, vmax=vmax)
        
        # Add colorbar
        cbar = fig.colorbar(scatter, ax=ax)
        cbar.set_label(color_by.replace('_', ' ').title(), rotation=270, labelpad=15)
    else:
        # Simple scatter plot
        ax.scatter(time_data, z_data, s=scatter_size, alpha=alpha, color='blue')
    
    # Customize plot
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.6)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=dpi, bbox_inches='tight')
        print(f"Z vs time plot saved to {save_path}")
    
    if show:
        plt.show()
    
    return fig, ax


def plot_species_identity_evolution(data: pd.DataFrame,
                                   title: str = "Species Identity Evolution",
                                   xlabel: str = "Time (ps)",
                                   ylabel: str = "Species ID",
                                   figsize: Tuple[float, float] = (12, 7),
                                   color_by: str = 'displacement',
                                   scatter_size: float = 10,
                                   alpha: float = 0.8,
                                   cmap: str = 'plasma',
                                   save_path: Optional[str] = None,
                                   dpi: int = 300,
                                   show: bool = True) -> Tuple[Figure, Axes]:
    """
    Plot species identity evolution over time.
    
    This function creates plots similar to those generated by oh_id.py,
    showing how species identities change over time.
    
    Parameters
    ----------
    data : pandas.DataFrame
        DataFrame with columns: time, species_id, and optional color column
    title : str, default "Species Identity Evolution"
        Plot title
    xlabel : str, default "Time (ps)"
        X-axis label
    ylabel : str, default "Species ID"
        Y-axis label
    figsize : tuple, default (12, 7)
        Figure size
    color_by : str, default 'displacement'
        Column name for coloring points
    scatter_size : float, default 10
        Size of scatter points
    alpha : float, default 0.8
        Transparency of points
    cmap : str, default 'plasma'
        Colormap name
    save_path : str, optional
        Path to save figure
    dpi : int, default 300
        Resolution for saved figure
    show : bool, default True
        Whether to display plot
        
    Returns
    -------
    tuple
        (Figure, Axes) objects
    """
    fig, ax = plt.subplots(figsize=figsize)
    
    # Validate required columns
    required_cols = ['time', 'species_id']
    for col in required_cols:
        if col not in data.columns:
            raise ValueError(f"DataFrame must contain '{col}' column")
    
    time_data = data['time'].values
    species_id_data = data['species_id'].values
    
    # Handle coloring
    if color_by in data.columns:
        color_data = data[color_by].values
        scatter = ax.scatter(time_data, species_id_data,
                           c=color_data, s=scatter_size, alpha=alpha,
                           cmap=cmap, vmin=0, vmax=5)  # Typical displacement range
        
        # Add colorbar
        cbar = fig.colorbar(scatter, ax=ax)
        cbar.set_label('Distance (Å)', rotation=270, labelpad=15)
    else:
        ax.scatter(time_data, species_id_data, s=scatter_size, alpha=alpha)
    
    # Customize plot
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14)
    
    # Ensure Y-axis shows integer ticks for species IDs
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))
    
    # Set reasonable limits
    if len(species_id_data) > 0:
        y_min = np.min(species_id_data) - 2
        y_max = np.max(species_id_data) + 2
        ax.set_ylim(bottom=max(0, y_min), top=y_max)
    
    ax.set_xlim(left=0)
    ax.grid(True, linestyle='--', alpha=0.6)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=dpi, bbox_inches='tight')
        print(f"Species identity plot saved to {save_path}")
    
    if show:
        plt.show()
    
    return fig, ax


def plot_time_series(data: Union[pd.DataFrame, Dict[str, np.ndarray]],
                    x_col: str = 'time',
                    y_col: str = 'value',
                    title: str = "Time Series",
                    xlabel: str = "Time",
                    ylabel: str = "Value",
                    figsize: Tuple[float, float] = (10, 6),
                    color: str = 'blue',
                    linestyle: str = '-',
                    linewidth: float = 1.5,
                    marker: Optional[str] = None,
                    markersize: float = 4,
                    alpha: float = 1.0,
                    grid: bool = True,
                    save_path: Optional[str] = None,
                    dpi: int = 300,
                    show: bool = True) -> Tuple[Figure, Axes]:
    """
    Plot general time series data.
    
    Parameters
    ----------
    data : pandas.DataFrame or dict
        Time series data
    x_col : str, default 'time'
        Column name for x-axis data
    y_col : str, default 'value'
        Column name for y-axis data
    title : str, default "Time Series"
        Plot title
    xlabel : str, default "Time"
        X-axis label
    ylabel : str, default "Value"
        Y-axis label
    figsize : tuple, default (10, 6)
        Figure size
    color : str, default 'blue'
        Line color
    linestyle : str, default '-'
        Line style
    linewidth : float, default 1.5
        Line width
    marker : str, optional
        Marker style
    markersize : float, default 4
        Marker size
    alpha : float, default 1.0
        Line transparency
    grid : bool, default True
        Whether to show grid
    save_path : str, optional
        Path to save figure
    dpi : int, default 300
        Resolution for saved figure
    show : bool, default True
        Whether to display plot
        
    Returns
    -------
    tuple
        (Figure, Axes) objects
    """
    fig, ax = plt.subplots(figsize=figsize)
    
    # Handle different input types
    if isinstance(data, pd.DataFrame):
        if x_col not in data.columns or y_col not in data.columns:
            raise ValueError(f"DataFrame must contain '{x_col}' and '{y_col}' columns")
        x_data = data[x_col].values
        y_data = data[y_col].values
    elif isinstance(data, dict):
        if x_col not in data or y_col not in data:
            raise ValueError(f"Data dict must contain '{x_col}' and '{y_col}' keys")
        x_data = data[x_col]
        y_data = data[y_col]
    else:
        raise ValueError("Data must be a pandas DataFrame or dictionary")
    
    # Plot the time series
    ax.plot(x_data, y_data, color=color, linestyle=linestyle, 
            linewidth=linewidth, marker=marker, markersize=markersize,
            alpha=alpha)
    
    # Customize plot
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14)
    
    if grid:
        ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=dpi, bbox_inches='tight')
        print(f"Time series plot saved to {save_path}")
    
    if show:
        plt.show()
    
    return fig, ax