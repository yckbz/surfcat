"""
Heatmap plotting functions for 2D visualizations.

This module provides functions for creating 2D heatmaps such as
angle vs time distributions and other time-resolved analyses.
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.axes import Axes
from typing import Dict, Optional, Tuple, Union
import warnings


def plot_angle_vs_time_heatmap(data: Dict[str, np.ndarray],
                              title: str = "Angle vs Time Distribution",
                              xlabel: str = "Time (ns)",
                              ylabel: str = "Angle (degrees)",
                              figsize: Tuple[float, float] = (10, 6),
                              cmap: str = 'viridis',
                              vmin: Optional[float] = None,
                              vmax: Optional[float] = None,
                              colorbar_label: str = "Normalized Probability",
                              save_path: Optional[str] = None,
                              dpi: int = 300,
                              show: bool = True) -> Tuple[Figure, Axes]:
    """
    Create a 2D heatmap of angle distribution vs time.
    
    This function creates heatmaps similar to those generated by
    h2o_dir.py and oh_dir.py scripts.
    
    Parameters
    ----------
    data : dict
        Dictionary containing 2D histogram data
    title : str, default "Angle vs Time Distribution"
        Plot title
    xlabel : str, default "Time (ns)"
        X-axis label
    ylabel : str, default "Angle (degrees)"
        Y-axis label
    figsize : tuple, default (10, 6)
        Figure size
    cmap : str, default 'viridis'
        Colormap name
    vmin : float, optional
        Minimum value for colormap
    vmax : float, optional
        Maximum value for colormap
    colorbar_label : str, default "Normalized Probability"
        Label for colorbar
    save_path : str, optional
        Path to save figure
    dpi : int, default 300
        Resolution for saved figure
    show : bool, default True
        Whether to display plot
        
    Returns
    -------
    tuple
        (Figure, Axes) objects
        
    Examples
    --------
    >>> fig, ax = plot_angle_vs_time_heatmap(heatmap_data, 
    ...                                      title="Water Orientation vs Time")
    """
    fig, ax = plt.subplots(figsize=figsize)
    
    # Validate required data
    required_keys = ['time_values', 'angle_values', 'histogram_2d']
    for key in required_keys:
        if key not in data:
            raise ValueError(f"Data must contain '{key}' key")
    
    time_values = data['time_values']
    angle_values = data['angle_values']
    histogram_2d = data['histogram_2d']
    
    # Create meshgrid for pcolormesh
    T, A = np.meshgrid(time_values, angle_values)
    
    # Create the heatmap
    im = ax.pcolormesh(T, A, histogram_2d, shading='auto', cmap=cmap, vmin=vmin, vmax=vmax)
    
    # Add colorbar
    cbar = fig.colorbar(im, ax=ax)
    cbar.set_label(colorbar_label, rotation=270, labelpad=15)
    
    # Customize plot
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14)
    
    # Set reasonable limits
    ax.set_ylim(0, 180)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=dpi, bbox_inches='tight')
        print(f"Heatmap saved to {save_path}")
    
    if show:
        plt.show()
    
    return fig, ax


def plot_2d_histogram(x_data: np.ndarray, 
                     y_data: np.ndarray,
                     bins: Union[int, Tuple[int, int]] = 50,
                     title: str = "2D Histogram",
                     xlabel: str = "X",
                     ylabel: str = "Y",
                     figsize: Tuple[float, float] = (8, 6),
                     cmap: str = 'Blues',
                     density: bool = True,
                     save_path: Optional[str] = None,
                     dpi: int = 300,
                     show: bool = True) -> Tuple[Figure, Axes]:
    """
    Create a 2D histogram plot.
    
    Parameters
    ----------
    x_data : numpy.ndarray
        X-axis data
    y_data : numpy.ndarray
        Y-axis data
    bins : int or tuple of int, default 50
        Number of bins for histogram
    title : str, default "2D Histogram"
        Plot title
    xlabel : str, default "X"
        X-axis label
    ylabel : str, default "Y"
        Y-axis label
    figsize : tuple, default (8, 6)
        Figure size
    cmap : str, default 'Blues'
        Colormap name
    density : bool, default True
        Whether to normalize histogram
    save_path : str, optional
        Path to save figure
    dpi : int, default 300
        Resolution for saved figure
    show : bool, default True
        Whether to display plot
        
    Returns
    -------
    tuple
        (Figure, Axes) objects
    """
    fig, ax = plt.subplots(figsize=figsize)
    
    # Create 2D histogram
    hist, xedges, yedges = np.histogram2d(x_data, y_data, bins=bins, density=density)
    
    # Create coordinate arrays for pcolormesh
    X, Y = np.meshgrid(xedges, yedges)
    
    # Plot
    im = ax.pcolormesh(X, Y, hist.T, cmap=cmap, shading='auto')
    
    # Add colorbar
    cbar = fig.colorbar(im, ax=ax)
    cbar.set_label('Density' if density else 'Count')
    
    # Customize plot
    ax.set_xlabel(xlabel, fontsize=12)
    ax.set_ylabel(ylabel, fontsize=12)
    ax.set_title(title, fontsize=14)
    
    plt.tight_layout()
    
    if save_path:
        plt.savefig(save_path, dpi=dpi, bbox_inches='tight')
        print(f"2D histogram saved to {save_path}")
    
    if show:
        plt.show()
    
    return fig, ax